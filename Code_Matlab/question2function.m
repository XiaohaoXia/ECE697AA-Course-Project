function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 22-Nov-2021 17:42:43.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx1 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====
Iter=10000;
% Input 1
x1_step1.xoffset = 1;
x1_step1.gain = 0.0689655172413793;
x1_step1.ymin = -1;

% Layer 1
b1 = [-89.590347246275953808;86.755437155042827158;83.862167824000309224;81.07386567994082327;78.204437456688808084;75.377260760593671307;72.515965861134063175;69.715231969665282463;66.843638398882134766;-64.00409273860007886;-61.15557835056550573;58.311117701698755411;55.467132905141596666;52.741835906781922461;-49.782378923111416213;46.939194266441141679;44.090074399185056109;-41.161979761456386484;38.429550080169647686;35.555542342313252391;32.711109562558256414;29.86643372385239914;27.021320978371935695;-24.177017830733010584;-21.406023193475412825;-18.489033092425522398;15.557582901960875787;12.802349140894612844;9.9555666091998968881;-7.1111110919573601308;4.266666417757773111;1.4221919024608025151;-1.4211451427328252173;4.1562910994012298715;7.1244238762079845628;9.7384140350261354513;-12.798205755866939981;15.644448379750198086;-18.487370840178421361;21.323657074941181122;-24.176204953727221891;27.051130432499732592;-29.866140670282959491;-32.711131206384727932;35.555546705036753963;38.398877242211746363;-41.197289441949891398;44.088717328370798043;46.964484966211919925;-49.777259073253219412;-52.631430517711997652;-55.466581503335000036;-58.421740902020097508;61.159116107870680423;63.999989823920749643;66.844444407498400551;69.688888888799326082;72.533333333333743553;-75.37777777777780841;78.22222222221543575;81.0666666688682227;-83.911112424646987051;86.75579053936733942;89.56903960143708332];
IW1_1 = [89.609652796036669997;-89.60008820917067851;-89.645567843024707599;-89.593289475914872355;-89.615330503279068353;-89.60044521172073928;-89.613775471808921225;-89.579107396482939407;-89.600589854813534885;89.597036273971454534;89.599983489456192842;-89.599996145711543249;-89.599726687820066218;-89.529881652723886987;89.59731568490326481;-89.596968312218606911;-89.599368285104233678;89.636966484575012259;-89.586753414062840761;-89.600005923052734147;-89.600000520384696756;-89.600072291132406122;-89.60027952494397141;89.600183748036698717;89.582453953531967272;89.599993312210543195;-89.614976004936380605;-89.599594976255517054;-89.599998094200543619;89.600000003501932611;-89.599999991404686739;-89.599998954502851234;-89.600037140232061006;89.603800324977143532;89.598605364193744549;89.622462992665973047;-89.600185607011454181;89.599998286706437511;-89.600366426875169168;89.602335646960682425;-89.600376792293971562;89.591027190339474373;-89.600163240976144152;-89.599993722988315881;89.600003966501589048;89.600503304950365191;-89.621137493729776224;89.60008932632250378;89.583887022711721215;-89.600286167433367268;-89.594602109069157336;-89.600064796138141787;-89.527518300727081169;89.597667223985084206;89.600006667087413348;89.600000024206025273;89.600000000058670935;89.599999999999724309;-89.599999999999965894;89.600000000006772893;89.599999997798434492;-89.599998686464118691;89.59976501618784539;89.6309603985628911];

% Layer 2
b2 = 0.29421933009981698914;
LW2_1 = [0.21026104613588642023 0.039877255001956483926 0.16087779094302892546 -0.088835824864733389794 0.078407655480035157169 0.23675224746320963631 -0.26593210772453435009 0.66133775082868262452 -0.65861629402224786123 -0.47450266939486029916 -0.58048690533223679111 -0.62277991231445639642 -0.20492140676371672914 -0.16483670513004855529 0.27976612739213874148 0.45451659060251647926 0.04208945187647383096 0.19366260144972782808 1.0939548821559008651 -0.0035556217388390443275 -0.65911267152816943593 -0.36544166526543125917 -0.075330698304092336137 0.086949880867368226078 -0.36567359070556915146 0.43362011750939744026 0.36576663809274284622 -0.36013557718623090409 -0.56666753381129220113 -0.6051526460517582251 -0.16393932522498455562 0.046735330031067771894 0.18493434665938363048 -0.25018214778722508429 0.16290671649013804823 0.36040241818025636755 -0.47237988755788901107 0.38757571567668708257 0.92916671091812086392 -0.18136420113543014199 -0.24024830497152654951 -0.15637870924311325638 -0.29301579225378249216 0.71857359262019926405 0.30115748463590236161 0.23639414197944413898 -0.31988386006700630926 -0.28425667973939638955 0.24866553343293909539 0.27561628018649719785 -0.34030403991475910441 -0.43581757372616297674 0.88725292758765628154 -1.0146765972287370428 0.67824932425615991338 0.73448037646297581471 0.50027444607066162696 -0.89466874386383399287 -0.38416433108282949105 -0.42137962123989042285 0.26736260463020122824 -0.63480132610640371826 0.35062739462248437849 -0.83913718569992534757];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.500682113572258;
y1_step1.xoffset = 1.01582265122005;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
